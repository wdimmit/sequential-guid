// Generated by CoffeeScript 1.9.0

/*
*    sequential-guid
*
*    Copyright (c) 2013 Pawel Nowosielski
*    MIT License - http://opensource.org/licenses/mit-license.php
*
*    More info and usage, please refer to README.md file
*    Generation guids version 1 and 4 cannot be done without node-uuid library, [thank you Broofa](https://github.com/broofa/node-uuid).
 */

(function() {
  var SeqUuid, uuid;

  uuid = typeof require === 'function' ? require('uuid') : this.uuid;

  SeqUuid = (function() {
    function SeqUuid() {
      this.guid_ver = this.guid_ver || 'v4';
      this.seed = void 0;
      if (!this.deferInit) {
        this.seed = this.generate();
      }
    }

    SeqUuid.prototype.next = function() {
      var carry, _increase, _increaseDigit;
      carry = true;
      _increaseDigit = function(digit) {
        if (digit === 'f') {
          carry = true;
          return '0';
        }
        carry = false;
        if (digit === '9') {
          return 'a';
        }
        return String.fromCharCode(digit.charCodeAt() + 1);
      };
      _increase = function(digit) {
        if (digit === '-') {
          return digit;
        }
        if (carry) {
          return _increaseDigit(digit);
        } else {
          return digit;
        }
      };
      if (this.seed == null) {
        this.seed = this.generate();
      }
      if (this.seed.length !== 36) {
        throw new Error("Seed has invalid format");
      }
      this.seed = this.seed.toLowerCase();
      return this.seed = ((this.seed.split('')).reverse().map(_increase)).reverse().join('');
    };

    SeqUuid.prototype.generate = function() {
      return uuid[this.guid_ver]().toLowerCase();
    };

    SeqUuid.prototype.deferInit = false;

    return SeqUuid;

  })();

  if (typeof require !== 'undefined' && require.main === module) {
    throw new Error("This module is not intended to be run as standalone application.");
  }

  if (typeof exports === 'object') {
    module.exports = SeqUuid;
  } else if (typeof define === 'function' && define.amd) {
    define((function() {
      return SeqUuid;
    }));
  } else {
    this.SeqUuid = SeqUuid;
  }

}).call(this);
